{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "419a6381-9bcb-41c5-81db-e744e53e2574",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import tensorflow as tf\n",
    "df1=pd.read_csv(\"billwerder_schadstoffe_2012-2023.csv\")\n",
    "df2=pd.read_csv(\"billwerder_wetter_2012-2023.csv\")\n",
    "df=pd.merge(df1, df2, on=\"Messzeit\")\n",
    "rolling_mean = df['Schwefeldioxid (µg/m3)'].rolling(window=7, min_periods=1).mean()\n",
    "df['Schwefeldioxid Mittelwert'] = rolling_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dfcdb212-2b7d-4f9b-ab3e-7d9a1aa4718f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train = df.iloc[:2555,:]\n",
    "df_val = df.iloc[2555:2920,:]\n",
    "df_test = df.iloc[2920:,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a522cb96-4747-4b4b-83ec-405e08f19a36",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_train = df_train.dropna()\n",
    "df_val = df_val.dropna()\n",
    "df_test = df_test.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5823d51d-6b83-4129-b79d-b10cde415883",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "x_train = df_train.drop(columns=['Feinstaub (µg/m3)', 'Messzeit', 'Unnamed: 0_x', 'Stickstoffdioxid (µg/m3)', 'Stickstoffmonoxid (µg/m3)', 'Schwefeldioxid (µg/m3)', 'Unnamed: 0_y'])\n",
    "y_train = df_train['Schwefeldioxid (µg/m3)']\n",
    "x_val = df_train.drop(columns=['Feinstaub (µg/m3)', 'Messzeit', 'Unnamed: 0_x', 'Stickstoffdioxid (µg/m3)', 'Stickstoffmonoxid (µg/m3)', 'Schwefeldioxid (µg/m3)', 'Unnamed: 0_y'])\n",
    "y_val = df_train['Schwefeldioxid (µg/m3)']\n",
    "x_test = df_test.drop(columns=['Feinstaub (µg/m3)', 'Messzeit', 'Unnamed: 0_x', 'Stickstoffdioxid (µg/m3)', 'Stickstoffmonoxid (µg/m3)', 'Schwefeldioxid (µg/m3)', 'Unnamed: 0_y'])\n",
    "y_test = df_test['Schwefeldioxid (µg/m3)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "226c141d-440f-441b-bf33-74cb854bac16",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def plot_history(grid_search, metrics):\n",
    "    cv_results = grid_search.cv_results_\n",
    "    history_df = pd.DataFrame(cv_results)\n",
    "    sns.lineplot(data=history_df[metrics])\n",
    "    plt.xlabel(\"Hyperparameter Combination\")\n",
    "    plt.ylabel(\"RMSE\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6db890c3-77f7-4b5c-a3d5-a128699bb1f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from scikeras.wrappers import KerasRegressor\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import BatchNormalization, Dense\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "\n",
    "def create_nn():\n",
    "    model = Sequential()\n",
    "    model.add(BatchNormalization(input_shape=(6,)))\n",
    "    model.add(Dense(100, 'relu'))\n",
    "    model.add(Dense(50, 'relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3), loss='mse', metrics=[keras.metrics.RootMeanSquaredError()])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d2665ff1-2526-44b2-aabd-af4d038953f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "earlystopper = EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=10\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5f20f2da-2e64-4d8d-be88-18fd81bf79ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    'batch_size': [8, 16, 32],\n",
    "\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "51db35f2-1f23-4fcb-ad4b-27f3a2578ce5",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = KerasRegressor(build_fn=create_nn, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "604070fc-88d5-4546-ae1d-7749b9b0b7a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "91a8153a-8908-48df-a647-b9d1565d411e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "199/199 - 2s - loss: 7.5005 - root_mean_squared_error: 2.7387 - val_loss: 802.3291 - val_root_mean_squared_error: 28.3254 - 2s/epoch - 9ms/step\n",
      "100/100 - 0s - 191ms/epoch - 2ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "199/199 - 2s - loss: 7.2375 - root_mean_squared_error: 2.6903 - val_loss: 423.4940 - val_root_mean_squared_error: 20.5790 - 2s/epoch - 9ms/step\n",
      "100/100 - 0s - 152ms/epoch - 2ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "199/199 - 2s - loss: 8.1078 - root_mean_squared_error: 2.8474 - val_loss: 418.0000 - val_root_mean_squared_error: 20.4450 - 2s/epoch - 8ms/step\n",
      "100/100 - 0s - 150ms/epoch - 1ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100/100 - 1s - loss: 10.4346 - root_mean_squared_error: 3.2303 - val_loss: 5370.5693 - val_root_mean_squared_error: 73.2842 - 1s/epoch - 13ms/step\n",
      "50/50 - 0s - 114ms/epoch - 2ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100/100 - 1s - loss: 9.2928 - root_mean_squared_error: 3.0484 - val_loss: 5006.9785 - val_root_mean_squared_error: 70.7600 - 1s/epoch - 14ms/step\n",
      "50/50 - 0s - 115ms/epoch - 2ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100/100 - 1s - loss: 9.3368 - root_mean_squared_error: 3.0556 - val_loss: 4740.9536 - val_root_mean_squared_error: 68.8546 - 1s/epoch - 15ms/step\n",
      "50/50 - 0s - 104ms/epoch - 2ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50/50 - 1s - loss: 14.4860 - root_mean_squared_error: 3.8060 - val_loss: 24977.9023 - val_root_mean_squared_error: 158.0440 - 1s/epoch - 24ms/step\n",
      "25/25 - 0s - 117ms/epoch - 5ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50/50 - 1s - loss: 12.1222 - root_mean_squared_error: 3.4817 - val_loss: 17859.1523 - val_root_mean_squared_error: 133.6381 - 1s/epoch - 25ms/step\n",
      "25/25 - 0s - 85ms/epoch - 3ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50/50 - 1s - loss: 14.3013 - root_mean_squared_error: 3.7817 - val_loss: 19585.5391 - val_root_mean_squared_error: 139.9483 - 1s/epoch - 25ms/step\n",
      "25/25 - 0s - 91ms/epoch - 4ms/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "298/298 - 2s - loss: 7.0046 - root_mean_squared_error: 2.6466 - val_loss: 37.5334 - val_root_mean_squared_error: 6.1265 - 2s/epoch - 6ms/step\n"
     ]
    }
   ],
   "source": [
    "grid_result = grid_search.fit(x_train, y_train, validation_data=(x_val, y_val), callbacks=[earlystopper])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "99cc303c-26e5-4202-8273-354775ecd81a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters:  {'batch_size': 8}\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters: \", grid_result.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3954668f-f3d9-428b-8900-ecb4bf068e47",
   "metadata": {},
   "outputs": [],
   "source": [
    "earlystopper = EarlyStopping(\n",
    "    monitor='val_loss',\n",
    "    patience=10\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6406ca29-42aa-4095-8be5-23e04e7b1a55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Praktikant\\anaconda3\\envs\\praktikum\\Lib\\site-packages\\scikeras\\wrappers.py:915: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
      "  X, y = self._initialize(X, y)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "298/298 - 2s - loss: 7.0942 - root_mean_squared_error: 2.6635 - val_loss: 24.0241 - val_root_mean_squared_error: 4.9014 - 2s/epoch - 6ms/step\n",
      "Epoch 2/100\n",
      "298/298 - 1s - loss: 5.2667 - root_mean_squared_error: 2.2949 - val_loss: 4.9272 - val_root_mean_squared_error: 2.2197 - 697ms/epoch - 2ms/step\n",
      "Epoch 3/100\n",
      "298/298 - 1s - loss: 5.0407 - root_mean_squared_error: 2.2451 - val_loss: 5.3163 - val_root_mean_squared_error: 2.3057 - 740ms/epoch - 2ms/step\n",
      "Epoch 4/100\n",
      "298/298 - 1s - loss: 5.1371 - root_mean_squared_error: 2.2665 - val_loss: 4.7255 - val_root_mean_squared_error: 2.1738 - 686ms/epoch - 2ms/step\n",
      "Epoch 5/100\n",
      "298/298 - 1s - loss: 4.7414 - root_mean_squared_error: 2.1775 - val_loss: 4.1837 - val_root_mean_squared_error: 2.0454 - 845ms/epoch - 3ms/step\n",
      "Epoch 6/100\n",
      "298/298 - 1s - loss: 4.7394 - root_mean_squared_error: 2.1770 - val_loss: 4.0387 - val_root_mean_squared_error: 2.0096 - 734ms/epoch - 2ms/step\n",
      "Epoch 7/100\n",
      "298/298 - 1s - loss: 4.6362 - root_mean_squared_error: 2.1532 - val_loss: 4.0041 - val_root_mean_squared_error: 2.0010 - 668ms/epoch - 2ms/step\n",
      "Epoch 8/100\n",
      "298/298 - 1s - loss: 4.6513 - root_mean_squared_error: 2.1567 - val_loss: 3.7943 - val_root_mean_squared_error: 1.9479 - 680ms/epoch - 2ms/step\n",
      "Epoch 9/100\n",
      "298/298 - 1s - loss: 4.4241 - root_mean_squared_error: 2.1034 - val_loss: 4.1917 - val_root_mean_squared_error: 2.0474 - 704ms/epoch - 2ms/step\n",
      "Epoch 10/100\n",
      "298/298 - 1s - loss: 4.6816 - root_mean_squared_error: 2.1637 - val_loss: 3.8876 - val_root_mean_squared_error: 1.9717 - 691ms/epoch - 2ms/step\n",
      "Epoch 11/100\n",
      "298/298 - 1s - loss: 4.4917 - root_mean_squared_error: 2.1194 - val_loss: 4.0044 - val_root_mean_squared_error: 2.0011 - 687ms/epoch - 2ms/step\n",
      "Epoch 12/100\n",
      "298/298 - 1s - loss: 4.6414 - root_mean_squared_error: 2.1544 - val_loss: 3.6671 - val_root_mean_squared_error: 1.9150 - 676ms/epoch - 2ms/step\n",
      "Epoch 13/100\n",
      "298/298 - 1s - loss: 4.4725 - root_mean_squared_error: 2.1148 - val_loss: 3.7182 - val_root_mean_squared_error: 1.9283 - 681ms/epoch - 2ms/step\n",
      "Epoch 14/100\n",
      "298/298 - 1s - loss: 4.5045 - root_mean_squared_error: 2.1224 - val_loss: 3.7280 - val_root_mean_squared_error: 1.9308 - 683ms/epoch - 2ms/step\n",
      "Epoch 15/100\n",
      "298/298 - 1s - loss: 4.5595 - root_mean_squared_error: 2.1353 - val_loss: 3.9264 - val_root_mean_squared_error: 1.9815 - 687ms/epoch - 2ms/step\n",
      "Epoch 16/100\n",
      "298/298 - 1s - loss: 4.7004 - root_mean_squared_error: 2.1680 - val_loss: 3.6903 - val_root_mean_squared_error: 1.9210 - 670ms/epoch - 2ms/step\n",
      "Epoch 17/100\n",
      "298/298 - 1s - loss: 4.5936 - root_mean_squared_error: 2.1433 - val_loss: 3.7163 - val_root_mean_squared_error: 1.9278 - 684ms/epoch - 2ms/step\n",
      "Epoch 18/100\n",
      "298/298 - 1s - loss: 4.4472 - root_mean_squared_error: 2.1088 - val_loss: 3.6872 - val_root_mean_squared_error: 1.9202 - 675ms/epoch - 2ms/step\n",
      "Epoch 19/100\n",
      "298/298 - 1s - loss: 4.4145 - root_mean_squared_error: 2.1011 - val_loss: 3.7084 - val_root_mean_squared_error: 1.9257 - 669ms/epoch - 2ms/step\n",
      "Epoch 20/100\n",
      "298/298 - 1s - loss: 4.4507 - root_mean_squared_error: 2.1097 - val_loss: 3.5224 - val_root_mean_squared_error: 1.8768 - 687ms/epoch - 2ms/step\n",
      "Epoch 21/100\n",
      "298/298 - 1s - loss: 4.5909 - root_mean_squared_error: 2.1426 - val_loss: 3.6859 - val_root_mean_squared_error: 1.9199 - 699ms/epoch - 2ms/step\n",
      "Epoch 22/100\n",
      "298/298 - 1s - loss: 4.5433 - root_mean_squared_error: 2.1315 - val_loss: 3.6031 - val_root_mean_squared_error: 1.8982 - 669ms/epoch - 2ms/step\n",
      "Epoch 23/100\n",
      "298/298 - 1s - loss: 4.4554 - root_mean_squared_error: 2.1108 - val_loss: 3.6663 - val_root_mean_squared_error: 1.9148 - 724ms/epoch - 2ms/step\n",
      "Epoch 24/100\n",
      "298/298 - 1s - loss: 4.4353 - root_mean_squared_error: 2.1060 - val_loss: 3.5447 - val_root_mean_squared_error: 1.8827 - 675ms/epoch - 2ms/step\n",
      "Epoch 25/100\n",
      "298/298 - 1s - loss: 4.5586 - root_mean_squared_error: 2.1351 - val_loss: 3.5177 - val_root_mean_squared_error: 1.8756 - 661ms/epoch - 2ms/step\n",
      "Epoch 26/100\n",
      "298/298 - 1s - loss: 4.6683 - root_mean_squared_error: 2.1606 - val_loss: 3.5978 - val_root_mean_squared_error: 1.8968 - 673ms/epoch - 2ms/step\n",
      "Epoch 27/100\n",
      "298/298 - 1s - loss: 4.5598 - root_mean_squared_error: 2.1354 - val_loss: 3.4682 - val_root_mean_squared_error: 1.8623 - 687ms/epoch - 2ms/step\n",
      "Epoch 28/100\n",
      "298/298 - 1s - loss: 4.4408 - root_mean_squared_error: 2.1073 - val_loss: 3.5056 - val_root_mean_squared_error: 1.8723 - 764ms/epoch - 3ms/step\n",
      "Epoch 29/100\n",
      "298/298 - 1s - loss: 4.5216 - root_mean_squared_error: 2.1264 - val_loss: 3.5986 - val_root_mean_squared_error: 1.8970 - 704ms/epoch - 2ms/step\n",
      "Epoch 30/100\n",
      "298/298 - 1s - loss: 4.4365 - root_mean_squared_error: 2.1063 - val_loss: 3.4916 - val_root_mean_squared_error: 1.8686 - 685ms/epoch - 2ms/step\n",
      "Epoch 31/100\n",
      "298/298 - 1s - loss: 4.4037 - root_mean_squared_error: 2.0985 - val_loss: 3.7527 - val_root_mean_squared_error: 1.9372 - 680ms/epoch - 2ms/step\n",
      "Epoch 32/100\n",
      "298/298 - 1s - loss: 4.4083 - root_mean_squared_error: 2.0996 - val_loss: 3.6126 - val_root_mean_squared_error: 1.9007 - 684ms/epoch - 2ms/step\n",
      "Epoch 33/100\n",
      "298/298 - 1s - loss: 4.3004 - root_mean_squared_error: 2.0738 - val_loss: 3.6656 - val_root_mean_squared_error: 1.9146 - 699ms/epoch - 2ms/step\n",
      "Epoch 34/100\n",
      "298/298 - 1s - loss: 4.4855 - root_mean_squared_error: 2.1179 - val_loss: 3.4986 - val_root_mean_squared_error: 1.8705 - 688ms/epoch - 2ms/step\n",
      "Epoch 35/100\n",
      "298/298 - 1s - loss: 4.5336 - root_mean_squared_error: 2.1292 - val_loss: 3.6552 - val_root_mean_squared_error: 1.9119 - 702ms/epoch - 2ms/step\n",
      "Epoch 36/100\n",
      "298/298 - 1s - loss: 4.4830 - root_mean_squared_error: 2.1173 - val_loss: 3.6821 - val_root_mean_squared_error: 1.9189 - 704ms/epoch - 2ms/step\n",
      "Epoch 37/100\n",
      "298/298 - 1s - loss: 4.3168 - root_mean_squared_error: 2.0777 - val_loss: 3.4286 - val_root_mean_squared_error: 1.8516 - 674ms/epoch - 2ms/step\n",
      "Epoch 38/100\n",
      "298/298 - 1s - loss: 4.6357 - root_mean_squared_error: 2.1531 - val_loss: 3.6099 - val_root_mean_squared_error: 1.9000 - 749ms/epoch - 3ms/step\n",
      "Epoch 39/100\n",
      "298/298 - 1s - loss: 4.4197 - root_mean_squared_error: 2.1023 - val_loss: 3.4454 - val_root_mean_squared_error: 1.8562 - 698ms/epoch - 2ms/step\n",
      "Epoch 40/100\n",
      "298/298 - 1s - loss: 4.5138 - root_mean_squared_error: 2.1246 - val_loss: 3.4651 - val_root_mean_squared_error: 1.8615 - 782ms/epoch - 3ms/step\n",
      "Epoch 41/100\n",
      "298/298 - 1s - loss: 4.3345 - root_mean_squared_error: 2.0819 - val_loss: 3.5371 - val_root_mean_squared_error: 1.8807 - 664ms/epoch - 2ms/step\n",
      "Epoch 42/100\n",
      "298/298 - 1s - loss: 4.5351 - root_mean_squared_error: 2.1296 - val_loss: 3.6590 - val_root_mean_squared_error: 1.9128 - 750ms/epoch - 3ms/step\n",
      "Epoch 43/100\n",
      "298/298 - 1s - loss: 4.3427 - root_mean_squared_error: 2.0839 - val_loss: 3.5150 - val_root_mean_squared_error: 1.8748 - 731ms/epoch - 2ms/step\n",
      "Epoch 44/100\n",
      "298/298 - 1s - loss: 4.5694 - root_mean_squared_error: 2.1376 - val_loss: 3.6428 - val_root_mean_squared_error: 1.9086 - 715ms/epoch - 2ms/step\n",
      "Epoch 45/100\n",
      "298/298 - 1s - loss: 4.5867 - root_mean_squared_error: 2.1417 - val_loss: 3.5512 - val_root_mean_squared_error: 1.8845 - 756ms/epoch - 3ms/step\n",
      "Epoch 46/100\n",
      "298/298 - 1s - loss: 4.4129 - root_mean_squared_error: 2.1007 - val_loss: 3.6420 - val_root_mean_squared_error: 1.9084 - 743ms/epoch - 2ms/step\n",
      "Epoch 47/100\n",
      "298/298 - 1s - loss: 4.5035 - root_mean_squared_error: 2.1221 - val_loss: 3.4669 - val_root_mean_squared_error: 1.8620 - 669ms/epoch - 2ms/step\n",
      "Epoch 48/100\n",
      "298/298 - 1s - loss: 4.2242 - root_mean_squared_error: 2.0553 - val_loss: 3.5066 - val_root_mean_squared_error: 1.8726 - 728ms/epoch - 2ms/step\n",
      "Epoch 49/100\n",
      "298/298 - 1s - loss: 4.3753 - root_mean_squared_error: 2.0917 - val_loss: 3.4164 - val_root_mean_squared_error: 1.8483 - 1s/epoch - 4ms/step\n",
      "Epoch 50/100\n",
      "298/298 - 1s - loss: 4.6265 - root_mean_squared_error: 2.1509 - val_loss: 3.4567 - val_root_mean_squared_error: 1.8592 - 699ms/epoch - 2ms/step\n",
      "Epoch 51/100\n",
      "298/298 - 1s - loss: 4.5548 - root_mean_squared_error: 2.1342 - val_loss: 3.5860 - val_root_mean_squared_error: 1.8937 - 784ms/epoch - 3ms/step\n",
      "Epoch 52/100\n",
      "298/298 - 1s - loss: 4.5661 - root_mean_squared_error: 2.1368 - val_loss: 3.5042 - val_root_mean_squared_error: 1.8720 - 869ms/epoch - 3ms/step\n",
      "Epoch 53/100\n",
      "298/298 - 1s - loss: 4.2704 - root_mean_squared_error: 2.0665 - val_loss: 3.4897 - val_root_mean_squared_error: 1.8681 - 914ms/epoch - 3ms/step\n",
      "Epoch 54/100\n",
      "298/298 - 1s - loss: 4.3181 - root_mean_squared_error: 2.0780 - val_loss: 3.7998 - val_root_mean_squared_error: 1.9493 - 912ms/epoch - 3ms/step\n",
      "Epoch 55/100\n",
      "298/298 - 1s - loss: 4.5939 - root_mean_squared_error: 2.1433 - val_loss: 3.5439 - val_root_mean_squared_error: 1.8825 - 855ms/epoch - 3ms/step\n",
      "Epoch 56/100\n",
      "298/298 - 1s - loss: 4.5394 - root_mean_squared_error: 2.1306 - val_loss: 3.5261 - val_root_mean_squared_error: 1.8778 - 749ms/epoch - 3ms/step\n",
      "Epoch 57/100\n",
      "298/298 - 1s - loss: 4.3568 - root_mean_squared_error: 2.0873 - val_loss: 3.5138 - val_root_mean_squared_error: 1.8745 - 765ms/epoch - 3ms/step\n",
      "Epoch 58/100\n",
      "298/298 - 1s - loss: 4.3874 - root_mean_squared_error: 2.0946 - val_loss: 3.5241 - val_root_mean_squared_error: 1.8773 - 705ms/epoch - 2ms/step\n",
      "Epoch 59/100\n",
      "298/298 - 1s - loss: 4.6277 - root_mean_squared_error: 2.1512 - val_loss: 3.6029 - val_root_mean_squared_error: 1.8981 - 781ms/epoch - 3ms/step\n",
      "Epoch 60/100\n",
      "298/298 - 1s - loss: 4.4044 - root_mean_squared_error: 2.0987 - val_loss: 3.4782 - val_root_mean_squared_error: 1.8650 - 787ms/epoch - 3ms/step\n",
      "Epoch 61/100\n",
      "298/298 - 1s - loss: 4.5153 - root_mean_squared_error: 2.1249 - val_loss: 3.5094 - val_root_mean_squared_error: 1.8734 - 708ms/epoch - 2ms/step\n",
      "Epoch 62/100\n",
      "298/298 - 1s - loss: 4.5596 - root_mean_squared_error: 2.1353 - val_loss: 3.5346 - val_root_mean_squared_error: 1.8800 - 693ms/epoch - 2ms/step\n",
      "Epoch 63/100\n",
      "298/298 - 1s - loss: 4.3676 - root_mean_squared_error: 2.0899 - val_loss: 3.5574 - val_root_mean_squared_error: 1.8861 - 742ms/epoch - 2ms/step\n",
      "Epoch 64/100\n",
      "298/298 - 1s - loss: 4.5215 - root_mean_squared_error: 2.1264 - val_loss: 3.4874 - val_root_mean_squared_error: 1.8674 - 742ms/epoch - 2ms/step\n",
      "Epoch 65/100\n",
      "298/298 - 1s - loss: 4.4140 - root_mean_squared_error: 2.1009 - val_loss: 3.5286 - val_root_mean_squared_error: 1.8785 - 728ms/epoch - 2ms/step\n",
      "Epoch 66/100\n",
      "298/298 - 1s - loss: 4.4229 - root_mean_squared_error: 2.1031 - val_loss: 3.6390 - val_root_mean_squared_error: 1.9076 - 723ms/epoch - 2ms/step\n",
      "Epoch 67/100\n",
      "298/298 - 1s - loss: 4.4701 - root_mean_squared_error: 2.1143 - val_loss: 3.4743 - val_root_mean_squared_error: 1.8639 - 841ms/epoch - 3ms/step\n",
      "Epoch 68/100\n",
      "298/298 - 1s - loss: 4.5500 - root_mean_squared_error: 2.1331 - val_loss: 3.6133 - val_root_mean_squared_error: 1.9009 - 772ms/epoch - 3ms/step\n",
      "Epoch 69/100\n",
      "298/298 - 1s - loss: 4.5387 - root_mean_squared_error: 2.1304 - val_loss: 3.5934 - val_root_mean_squared_error: 1.8956 - 789ms/epoch - 3ms/step\n",
      "Epoch 70/100\n",
      "298/298 - 1s - loss: 4.2516 - root_mean_squared_error: 2.0619 - val_loss: 3.4391 - val_root_mean_squared_error: 1.8545 - 748ms/epoch - 3ms/step\n",
      "Epoch 71/100\n",
      "298/298 - 1s - loss: 4.3158 - root_mean_squared_error: 2.0775 - val_loss: 3.4040 - val_root_mean_squared_error: 1.8450 - 774ms/epoch - 3ms/step\n",
      "Epoch 72/100\n",
      "298/298 - 1s - loss: 4.3263 - root_mean_squared_error: 2.0800 - val_loss: 3.5318 - val_root_mean_squared_error: 1.8793 - 780ms/epoch - 3ms/step\n",
      "Epoch 73/100\n",
      "298/298 - 1s - loss: 4.4061 - root_mean_squared_error: 2.0991 - val_loss: 3.5768 - val_root_mean_squared_error: 1.8912 - 781ms/epoch - 3ms/step\n",
      "Epoch 74/100\n",
      "298/298 - 1s - loss: 4.2960 - root_mean_squared_error: 2.0727 - val_loss: 3.5409 - val_root_mean_squared_error: 1.8817 - 709ms/epoch - 2ms/step\n",
      "Epoch 75/100\n",
      "298/298 - 1s - loss: 4.4677 - root_mean_squared_error: 2.1137 - val_loss: 3.4379 - val_root_mean_squared_error: 1.8541 - 902ms/epoch - 3ms/step\n",
      "Epoch 76/100\n",
      "298/298 - 1s - loss: 4.4847 - root_mean_squared_error: 2.1177 - val_loss: 3.3868 - val_root_mean_squared_error: 1.8403 - 786ms/epoch - 3ms/step\n",
      "Epoch 77/100\n",
      "298/298 - 1s - loss: 4.2494 - root_mean_squared_error: 2.0614 - val_loss: 3.5007 - val_root_mean_squared_error: 1.8710 - 748ms/epoch - 3ms/step\n",
      "Epoch 78/100\n",
      "298/298 - 1s - loss: 4.4907 - root_mean_squared_error: 2.1191 - val_loss: 3.3859 - val_root_mean_squared_error: 1.8401 - 826ms/epoch - 3ms/step\n",
      "Epoch 79/100\n",
      "298/298 - 1s - loss: 4.4847 - root_mean_squared_error: 2.1177 - val_loss: 3.5735 - val_root_mean_squared_error: 1.8904 - 751ms/epoch - 3ms/step\n",
      "Epoch 80/100\n",
      "298/298 - 1s - loss: 4.4315 - root_mean_squared_error: 2.1051 - val_loss: 3.5014 - val_root_mean_squared_error: 1.8712 - 711ms/epoch - 2ms/step\n",
      "Epoch 81/100\n",
      "298/298 - 1s - loss: 4.2869 - root_mean_squared_error: 2.0705 - val_loss: 3.5088 - val_root_mean_squared_error: 1.8732 - 748ms/epoch - 3ms/step\n",
      "Epoch 82/100\n",
      "298/298 - 1s - loss: 4.3009 - root_mean_squared_error: 2.0739 - val_loss: 3.5841 - val_root_mean_squared_error: 1.8932 - 708ms/epoch - 2ms/step\n",
      "Epoch 83/100\n",
      "298/298 - 1s - loss: 4.3036 - root_mean_squared_error: 2.0745 - val_loss: 3.4174 - val_root_mean_squared_error: 1.8486 - 693ms/epoch - 2ms/step\n",
      "Epoch 84/100\n",
      "298/298 - 1s - loss: 4.3096 - root_mean_squared_error: 2.0759 - val_loss: 3.5438 - val_root_mean_squared_error: 1.8825 - 698ms/epoch - 2ms/step\n",
      "Epoch 85/100\n",
      "298/298 - 1s - loss: 4.1947 - root_mean_squared_error: 2.0481 - val_loss: 3.6817 - val_root_mean_squared_error: 1.9188 - 691ms/epoch - 2ms/step\n",
      "Epoch 86/100\n",
      "298/298 - 1s - loss: 4.4488 - root_mean_squared_error: 2.1092 - val_loss: 3.4003 - val_root_mean_squared_error: 1.8440 - 685ms/epoch - 2ms/step\n",
      "Epoch 87/100\n",
      "298/298 - 1s - loss: 4.4031 - root_mean_squared_error: 2.0984 - val_loss: 3.4665 - val_root_mean_squared_error: 1.8618 - 785ms/epoch - 3ms/step\n",
      "Epoch 88/100\n",
      "298/298 - 1s - loss: 4.4270 - root_mean_squared_error: 2.1040 - val_loss: 3.4293 - val_root_mean_squared_error: 1.8518 - 976ms/epoch - 3ms/step\n",
      "Epoch 89/100\n",
      "298/298 - 1s - loss: 4.2932 - root_mean_squared_error: 2.0720 - val_loss: 3.5438 - val_root_mean_squared_error: 1.8825 - 768ms/epoch - 3ms/step\n",
      "Epoch 90/100\n",
      "298/298 - 1s - loss: 4.5144 - root_mean_squared_error: 2.1247 - val_loss: 3.4564 - val_root_mean_squared_error: 1.8591 - 713ms/epoch - 2ms/step\n",
      "Epoch 91/100\n",
      "298/298 - 1s - loss: 4.3007 - root_mean_squared_error: 2.0738 - val_loss: 3.5196 - val_root_mean_squared_error: 1.8761 - 819ms/epoch - 3ms/step\n",
      "Epoch 92/100\n",
      "298/298 - 1s - loss: 4.2446 - root_mean_squared_error: 2.0602 - val_loss: 3.3990 - val_root_mean_squared_error: 1.8436 - 816ms/epoch - 3ms/step\n",
      "Epoch 93/100\n",
      "298/298 - 1s - loss: 4.3600 - root_mean_squared_error: 2.0881 - val_loss: 3.6119 - val_root_mean_squared_error: 1.9005 - 819ms/epoch - 3ms/step\n",
      "Epoch 94/100\n",
      "298/298 - 1s - loss: 4.3835 - root_mean_squared_error: 2.0937 - val_loss: 3.5251 - val_root_mean_squared_error: 1.8775 - 764ms/epoch - 3ms/step\n",
      "Epoch 95/100\n",
      "298/298 - 1s - loss: 4.2481 - root_mean_squared_error: 2.0611 - val_loss: 3.5432 - val_root_mean_squared_error: 1.8823 - 813ms/epoch - 3ms/step\n",
      "Epoch 96/100\n",
      "298/298 - 1s - loss: 4.3475 - root_mean_squared_error: 2.0851 - val_loss: 3.5290 - val_root_mean_squared_error: 1.8786 - 787ms/epoch - 3ms/step\n",
      "Epoch 97/100\n",
      "298/298 - 1s - loss: 4.4921 - root_mean_squared_error: 2.1195 - val_loss: 3.4094 - val_root_mean_squared_error: 1.8465 - 738ms/epoch - 2ms/step\n",
      "Epoch 98/100\n",
      "298/298 - 1s - loss: 4.5202 - root_mean_squared_error: 2.1261 - val_loss: 3.4890 - val_root_mean_squared_error: 1.8679 - 1s/epoch - 4ms/step\n",
      "Epoch 99/100\n",
      "298/298 - 1s - loss: 4.3251 - root_mean_squared_error: 2.0797 - val_loss: 3.4079 - val_root_mean_squared_error: 1.8461 - 801ms/epoch - 3ms/step\n",
      "Epoch 100/100\n",
      "298/298 - 1s - loss: 4.3121 - root_mean_squared_error: 2.0766 - val_loss: 3.5003 - val_root_mean_squared_error: 1.8709 - 939ms/epoch - 3ms/step\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(x_train, y_train,\n",
    "                    batch_size = 8,\n",
    "                    epochs = 100,\n",
    "                    validation_data=(x_val, y_val),\n",
    "                    callbacks=[earlystopper],\n",
    "                    verbose = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "773c6d82-e38b-4d78-9267-ce5d798dda63",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b93ea011-0cc8-4cbd-8983-02b0f38d14ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "75/75 - 0s - 132ms/epoch - 2ms/step\n",
      "36/36 - 0s - 66ms/epoch - 2ms/step\n"
     ]
    }
   ],
   "source": [
    "y_train_predicted = model.predict(x_train)\n",
    "y_test_predicted = model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9e89c3fa-6215-4ed3-94d7-4155972201f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5420476332318964"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(y_test, y_test_predicted, squared=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0aef0430-9760-4120-a87d-1e9b9628ff95",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
<<<<<<< HEAD
   "display_name": "Python 3 (ipykernel)",
=======
   "display_name": "globagrim",
>>>>>>> 4202fedea249f9ec58b1544e489b46808f70380e
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
